import { HttpService } from '../../../../../shared/domain/contracts/http';
import { env } from '../../../../../../config/env';
import { MalwareEvolutionRepository } from '../../../domain/contracts/malware-evolution.repository';
import {
  MalwareEvolutionByCountry,
  MalwareEvolutionByMonth,
  MalwareEvolutionByMonthPeriod,
  MalwareEvolutionByWeek,
  MalwareEvolutionByYearPeriod
} from '../../../domain/models/malware-evolution';

export function malwareEvolutionRepositoryBuilder({
  httpService
}: {
  httpService: HttpService;
}): MalwareEvolutionRepository {
  return {
    async findByWeek(): Promise<MalwareEvolutionByWeek[]> {
      const response = await httpService.get<MalwareEvolutionByWeek[]>(
        `${env.API_URL}/kpis/malware-evolution?operation=week-evolution`
      );
      return response.data;
    },
    async findByMonth(): Promise<MalwareEvolutionByMonth[]> {
      const response = await httpService.get<MalwareEvolutionByMonth[]>(
        `${env.API_URL}/kpis/malware-evolution?operation=month-evolution`
      );
      return response.data;
    },
    async findByCountry(): Promise<MalwareEvolutionByCountry[]> {
      const response = await httpService.get<MalwareEvolutionByCountry[]>(
        `${env.API_URL}/kpis/malware-evolution?operation=country-evolution`
      );
      return response.data;
    },
    async findByMonthPeriod(year: number, month: number): Promise<MalwareEvolutionByMonthPeriod[]> {
      const response = await httpService.get<MalwareEvolutionByMonthPeriod[]>(
        `${env.API_URL}/kpis/malware-evolution?operation=month-period-evolution&year=${year}&month=${month}`
      );
      return response.data;
    },
    async findByYearPeriod(year: number): Promise<MalwareEvolutionByYearPeriod[]> {
      const response = await httpService.get<MalwareEvolutionByYearPeriod[]>(
        `${env.API_URL}/kpis/malware-evolution?operation=year-period-evolution&year=${year}`
      );
      return response.data;
    }
  };
}
