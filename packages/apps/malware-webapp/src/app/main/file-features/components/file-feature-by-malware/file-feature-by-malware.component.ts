import { Component, OnInit } from '@angular/core';
import { EChartsOption } from 'echarts';
import { findFileFeatureByMalwareAndFileType } from '../../../../../../dependencies/use-cases/file-features';
import { FileFeatureByMalwareAndFileType } from '@core/malware/file-features/domain/models/file-feature';
import { includes, sortBy } from 'lodash';

@Component({
  selector: 'tfm-file-feature-by-malware',
  templateUrl: './file-feature-by-malware.component.html',
  styleUrls: ['./file-feature-by-malware.component.sass']
})
export class FileFeatureByMalwareComponent implements OnInit {
  private readonly FILE_TYPES = ['exe', 'xlsx', 'dll', 'zip', 'elf'];

  chartOpts: EChartsOption;

  async ngOnInit(): Promise<void> {
    await this.initFileFeatureByFileChart();
  }

  formatNumber(num: number): string {
    return new Intl.NumberFormat('ES-es').format(num);
  }

  private async initFileFeatureByFileChart(): Promise<void> {
    const data = await findFileFeatureByMalwareAndFileType();
    const filteredData = this.filterAndFormatData(data);

    this.chartOpts = {
      tooltip: { trigger: 'item', triggerOn: 'mousemove' },
      legend: {},
      series: [
        {
          top: '5%',
          left: '15%',
          right: '60%',
          bottom: '65%',
          type: 'tree',
          symbolSize: 7,
          data: [this.createTree(this.FILE_TYPES[0], filteredData)],
          label: { position: 'left', verticalAlign: 'middle', align: 'right' },
          leaves: { label: { position: 'right', verticalAlign: 'middle', align: 'left' } }
        },
        {
          top: '35%',
          left: '15%',
          right: '60%',
          bottom: '35%',
          type: 'tree',
          symbolSize: 7,
          data: [this.createTree(this.FILE_TYPES[1], filteredData)],
          label: { position: 'left', verticalAlign: 'middle', align: 'right' },
          leaves: { label: { position: 'right', verticalAlign: 'middle', align: 'left' } }
        },
        {
          top: '65%',
          left: '15%',
          right: '60%',
          bottom: '5%',
          type: 'tree',
          symbolSize: 7,
          data: [this.createTree(this.FILE_TYPES[2], filteredData)],
          label: { position: 'left', verticalAlign: 'middle', align: 'right' },
          leaves: { label: { position: 'right', verticalAlign: 'middle', align: 'left' } }
        },
        {
          top: '20%',
          left: '60%',
          right: '15%',
          bottom: '50%',
          type: 'tree',
          symbolSize: 7,
          data: [this.createTree(this.FILE_TYPES[3], filteredData)],
          label: { position: 'left', verticalAlign: 'middle', align: 'right' },
          leaves: { label: { position: 'right', verticalAlign: 'middle', align: 'left' } }
        },
        {
          top: '50%',
          left: '60%',
          right: '15%',
          bottom: '20%',
          type: 'tree',
          symbolSize: 7,
          data: [this.createTree(this.FILE_TYPES[4], filteredData)],
          label: { position: 'left', verticalAlign: 'middle', align: 'right' },
          leaves: { label: { position: 'right', verticalAlign: 'middle', align: 'left' } }
        }
      ]
    };
  }

  private filterAndFormatData(data: FileFeatureByMalwareAndFileType[]) {
    data = data.filter(
      (d) => d.fileType != null && d.malwareType != null && includes(this.FILE_TYPES, d.fileType)
    );
    return data;
  }

  private createTree(fileType: string, data: FileFeatureByMalwareAndFileType[]) {
    let filteredData = data.filter((d) => d.fileType === fileType);
    filteredData = sortBy(filteredData, 'result').reverse().slice(0, 10);

    return {
      name: fileType,
      children: filteredData.map((d) => ({ name: d.malwareType, value: d.result }))
    };
  }
}
