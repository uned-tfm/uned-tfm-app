import { Component, OnInit } from '@angular/core';
import { EChartsOption } from 'echarts';
import { findFileFeatureAvgByFileType } from '../../../../../../dependencies/use-cases/file-features';
import { FileFeatureByFileType } from '@core/malware/file-features/domain/models/file-feature';
import { meanBy, round, sortBy } from 'lodash';

@Component({
  selector: 'tfm-file-feature-by-avg-file',
  templateUrl: './file-feature-by-avg-file.component.html',
  styleUrls: ['./file-feature-by-avg-file.component.sass']
})
export class FileFeatureByAvgFileComponent implements OnInit {
  chartOpts: EChartsOption;

  async ngOnInit(): Promise<void> {
    await this.initFileFeatureByAvgFileChart();
  }

  private async initFileFeatureByAvgFileChart(): Promise<void> {
    const malwareData = await findFileFeatureAvgByFileType();
    const data = this.filterAndFormatData(malwareData);
    const mean = round(meanBy(data, 'value'), 4);

    this.chartOpts = {
      tooltip: {
        trigger: 'axis',
        axisPointer: {
          type: 'shadow'
        }
      },
      legend: {},
      grid: {},
      xAxis: {
        type: 'category',
        data: data.map((d) => d.name),
        axisLabel: {
          rotate: 330
        }
      },
      yAxis: {
        type: 'value',
        name: 'Tamaño (MB)'
      },
      series: [
        {
          type: 'bar',
          name: 'Tamaño (MB)',
          data: data.map((d) => d.value)
        },
        {
          type: 'line',
          name: 'Media (MB)',
          showSymbol: false,
          data: data.map((d) => mean)
        }
      ],
      dataZoom: [
        {
          show: true,
          start: 0,
          end: 100,
          height: 20,
          bottom: '30px'
        },
        {
          show: true,
          yAxisIndex: 0,
          filterMode: 'empty',
          showDataShadow: false,
          right: '40px'
        }
      ],
      color: ['rgb(217,95,14)', '#4575b4']
    };
  }

  private filterAndFormatData(data: FileFeatureByFileType[]) {
    data = data.filter((d) => d.fileType != null);
    let dataInMegaBytes = data.map((d) => ({
      name: d.fileType,
      value: round(d.result / Math.pow(10, 6), 4)
    }));
    dataInMegaBytes = sortBy(dataInMegaBytes, 'value');
    return dataInMegaBytes;
  }
}
