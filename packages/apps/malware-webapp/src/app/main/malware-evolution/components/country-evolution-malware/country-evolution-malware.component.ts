import { AfterViewInit, Component, Input, OnChanges, OnDestroy } from '@angular/core';
import * as L from 'leaflet';
import { MapService } from '@app/shared/services/map/map.service';
import { hasValue, isNil } from '@core/utils/type-checkers';
import { MalwareEvolutionByCountry } from '@core/malware/malware-evolution/domain/models/malware-evolution';

@Component({
  selector: 'tfm-country-evolution-malware',
  templateUrl: './country-evolution-malware.component.html',
  styleUrls: ['./country-evolution-malware.component.sass']
})
export class CountryEvolutionMalwareComponent implements OnChanges, OnDestroy, AfterViewInit {
  private map: L.Map;
  private canShowMap = false;

  mapId = 'map1';

  @Input() countryEvolution: MalwareEvolutionByCountry[];

  constructor(private readonly mapService: MapService) {}

  ngAfterViewInit() {
    this.canShowMap = true;
  }

  ngOnDestroy() {
    if (hasValue(this.map)) {
      this.mapService.removeMap(this.mapId);
    }
  }

  ngOnChanges(): void {
    if (hasValue(this.countryEvolution) && this.canShowMap) {
      this.countryEvolution = this.countryEvolution.filter((d) => !isNil(d.country));

      if (hasValue(this.map)) {
        this.mapService.removeMap(this.mapId);
        this.map = null;
      }

      this.map = this.mapService.createNewMapInstanceAnimated(this.mapId, this.countryEvolution, {
        zoomControl: false,
        doubleClickZoom: false,
        closePopupOnClick: false,
        trackResize: false,
        touchZoom: false,
        scrollWheelZoom: false
      });
    }
  }
}
