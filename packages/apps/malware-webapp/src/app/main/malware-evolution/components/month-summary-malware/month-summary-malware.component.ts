import { Component, Input, OnChanges } from '@angular/core';
import { EChartsOption } from 'echarts';
import { MalwareEvolutionByMonthPeriod } from '@core/malware/malware-evolution/domain/models/malware-evolution';
import { hasValue } from '@core/utils/type-checkers';

@Component({
  selector: 'tfm-month-summary-malware',
  templateUrl: './month-summary-malware.component.html',
  styleUrls: ['./month-summary-malware.component.sass']
})
export class MonthSummaryMalwareComponent implements OnChanges {
  @Input() monthSummary: {
    current: MalwareEvolutionByMonthPeriod[];
    previous: MalwareEvolutionByMonthPeriod[];
  };

  monthSummaryOpts: EChartsOption;
  monthSummaryDifference: number;

  ngOnChanges(): void {
    if (hasValue(this.monthSummary)) {
      this.initMonthSummaryChart();
    }
  }

  formatNumber(num: number): string {
    return new Intl.NumberFormat('ES-es').format(num);
  }

  private initMonthSummaryChart(): void {
    const previousMonthSummary = this.monthSummary.previous;
    const currentMonthSummary = this.monthSummary.current;

    this.monthSummaryDifference = currentMonthSummary[0].count - previousMonthSummary[0].count;
    const previousMonth = previousMonthSummary[0].month;
    const currentMonth = currentMonthSummary[0].month;

    this.monthSummaryOpts = {
      tooltip: {
        trigger: 'axis',
        axisPointer: {
          type: 'shadow'
        }
      },
      legend: {},
      grid: {
        left: '3%',
        right: '4%',
        bottom: '3%',
        containLabel: true
      },
      xAxis: {
        type: 'value',
        boundaryGap: [0, 0.01],
        nameLocation: 'middle',
        name: 'Num. detecciones',
        nameTextStyle: {
          padding: 10,
          fontWeight: 'bold'
        }
      },
      yAxis: {
        type: 'category',
        data: ['']
      },
      series: [
        {
          name: '',
          type: 'bar',
          barWidth: '50pt',
          data: []
        },
        {
          name: this.getMonthShortName(previousMonth),
          type: 'bar',
          barWidth: '50pt',
          data: previousMonthSummary.map((data) => data.count)
        },
        {
          name: this.getMonthShortName(currentMonth),
          type: 'bar',
          barWidth: '50pt',
          data: currentMonthSummary.map((data) => data.count)
        }
      ],
      color: ['rgb(217,95,14)', 'rgb(254,196,79)']
    };
  }

  private getMonthShortName(month: number): string {
    const date = new Date();
    date.setMonth(month - 1);

    return date.toLocaleString('es-ES', { month: 'long' });
  }
}
