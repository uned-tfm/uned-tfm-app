import { Component, EventEmitter, Input, OnChanges, Output } from '@angular/core';
import { EChartsOption } from 'echarts';
import { MalwareEvolutionByMonth } from '@core/malware/malware-evolution/domain/models/malware-evolution';
import { hasValue } from '@core/utils/type-checkers';

@Component({
  selector: 'tfm-month-evolution-malware',
  templateUrl: './month-evolution-malware.component.html',
  styleUrls: ['./month-evolution-malware.component.sass']
})
export class MonthEvolutionMalwareComponent implements OnChanges {
  @Input() monthEvolution: MalwareEvolutionByMonth[];
  @Output() onYearSelectionChanged = new EventEmitter<number[]>();

  monthEvolutionOpts: EChartsOption;

  ngOnChanges(): void {
    if (hasValue(this.monthEvolution)) {
      this.initMonthSummaryChart();
    }
  }

  changedSelectedYears(event: any): void {
    const yearSelected: number[] = [];

    for (const [key, value] of Object.entries(event)) {
      if (value === true) {
        yearSelected.push(parseInt(key, 10));
      }
    }

    this.onYearSelectionChanged.emit(yearSelected);
  }

  formatNumber(num: number): string {
    return new Intl.NumberFormat('ES-es').format(num);
  }

  private initMonthSummaryChart(): void {
    this.monthEvolutionOpts = {
      tooltip: {
        trigger: 'axis',
        axisPointer: {
          type: 'shadow'
        }
      },
      legend: {},
      grid: {
        left: '3%',
        right: '4%',
        bottom: '3%',
        containLabel: true
      },
      xAxis: {
        type: 'category',
        data: [
          'Enero',
          'Febrero',
          'Marzo',
          'Abril',
          'Mayo',
          'Junio',
          'Julio',
          'Agosto',
          'Septiembre',
          'Octubre',
          'Noviembre',
          'Diciembre'
        ]
      },
      yAxis: { name: 'Income' },
      series: [
        {
          name: '2020',
          type: 'line',
          data: [
            null,
            ...this.monthEvolution.filter((d) => d.year === 2020).map((data) => data.count)
          ]
        },
        {
          name: '2021',
          type: 'line',
          data: this.monthEvolution.filter((d) => d.year === 2021).map((data) => data.count)
        },
        {
          name: '2022',
          type: 'line',
          data: this.monthEvolution.filter((d) => d.year === 2022).map((data) => data.count)
        },
        {
          name: '2023',
          type: 'line',
          data: this.monthEvolution.filter((d) => d.year === 2023).map((data) => data.count)
        }
      ],
      color: ['rgb(215,25,28)', 'rgb(253,174,97)', 'rgb(171,221,164)', 'rgb(43,131,186)']
    };
  }
}
