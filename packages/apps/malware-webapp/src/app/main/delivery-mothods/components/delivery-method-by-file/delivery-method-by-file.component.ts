import { Component, OnInit } from '@angular/core';
import { EChartsOption } from 'echarts';
import { findDeliveryMethodByFileType } from '../../../../../../dependencies/use-cases/delivery-methods';
import { groupBy, sortBy, sumBy } from 'lodash';
import { DeliveryMethodByFileType } from '@core/malware/delivery-methods/domain/models/delivery-method';

@Component({
  selector: 'tfm-delivery-method-by-file',
  templateUrl: './delivery-method-by-file.component.html',
  styleUrls: ['./delivery-method-by-file.component.sass']
})
export class DeliveryMethodByFileComponent implements OnInit {
  chartOpts: EChartsOption;

  async ngOnInit(): Promise<void> {
    await this.initDeliveryMethodByFileChart();
  }

  formatNumber(num: number): string {
    return new Intl.NumberFormat('ES-es').format(num);
  }

  private async initDeliveryMethodByFileChart(): Promise<void> {
    let data = await findDeliveryMethodByFileType();
    data = data.filter((d) => d.deliveryMethod != null && d.fileType != null);

    const series = this.filterData(data);
    const dimensions = ['malware', ...Object.keys(groupBy(data, 'deliveryMethod'))];

    this.chartOpts = {
      dataset: {
        dimensions,
        source: Object.keys(series).map((key) => {
          const serie = series[key];
          const result: Record<string, unknown> = { malware: key };

          for (const { deliveryMethod, count } of serie) {
            result[deliveryMethod] = count;
          }

          return result;
        })
      },
      tooltip: {
        trigger: 'axis',
        axisPointer: {
          type: 'shadow'
        }
      },
      legend: {},
      grid: {},
      xAxis: {
        type: 'category',
        data: Object.keys(series),
        axisLabel: {
          rotate: 330
        }
      },
      yAxis: {
        type: 'value'
      },
      series: [
        {
          type: 'bar'
        },
        {
          type: 'bar'
        },
        {
          type: 'bar'
        },
        {
          type: 'bar'
        },
        {
          type: 'bar'
        },
        {
          type: 'bar'
        }
      ],
      dataZoom: [
        {
          show: true,
          yAxisIndex: 0,
          filterMode: 'empty',
          showDataShadow: false,
          right: '40px'
        }
      ],
      color: ['#d73027', '#f46d43', '#fdae61', '#fee090', '#74add1', '#4575b4']
    };
  }

  private filterData(data: DeliveryMethodByFileType[]) {
    const fileTypes = groupBy(data, 'fileType');

    for (const key of Object.keys(fileTypes)) {
      fileTypes[key] = sortBy(fileTypes[key], ['count']).reverse();

      if (fileTypes[key].length < 6 || sumBy(fileTypes[key], 'count') < 580) {
        delete fileTypes[key];
      }
    }

    return fileTypes;
  }
}
