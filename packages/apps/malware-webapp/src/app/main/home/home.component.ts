import { Component, OnInit } from '@angular/core';
import { findFileFeatureByFileType } from '../../../../dependencies/use-cases/file-features';
import { FileFeatureByFileType } from '@core/malware/file-features/domain/models/file-feature';
import { groupBy, sortBy, sumBy } from 'lodash';
import { EChartsOption } from 'echarts';
import {
  findMalwareTypeByMalwareType,
  findMalwareTypeMoreNumDetections
} from '../../../../dependencies/use-cases/malware-types';
import { CountByMalwareType } from '@core/malware/malware-types/domain/models/malware-type';
import { findDeliveryMethodByFileType } from '../../../../dependencies/use-cases/delivery-methods';
import { DeliveryMethodByFileType } from '@core/malware/delivery-methods/domain/models/delivery-method';
import * as L from 'leaflet';
import { isNil } from '@core/utils/type-checkers';
import { findMalwareEvolutionByCountry } from '../../../../dependencies/use-cases/malware-evolution';
import { MapService } from '@app/shared/services/map/map.service';
import { Router } from '@angular/router';

@Component({
  selector: 'app-home',
  templateUrl: './home.component.html',
  styleUrls: ['./home.component.sass']
})
export class HomeComponent implements OnInit {
  circularChartOpts: EChartsOption;
  malwareTypeChartOpts: EChartsOption;
  deliveryMethodChartOpts: EChartsOption;

  private map: L.Map;
  mapId = 'map21';

  constructor(private readonly mapService: MapService, private readonly router: Router) {}

  async ngOnInit(): Promise<void> {
    await this.initFileFeatureByFileChart();
    await this.initMalwareTypeMalwareChart();
    await this.initDeliveryMethodByFileChart();
    await this.initMalwareEvolutionMap();
  }

  async changeDashboard(type: string): Promise<void> {
    await this.router.navigateByUrl('dashboard/' + type);
  }
  private async initFileFeatureByFileChart(): Promise<void> {
    const data = await findFileFeatureByFileType();

    this.circularChartOpts = {
      tooltip: { trigger: 'item' },
      legend: {},
      series: [
        {
          type: 'pie',
          radius: ['30%', '90%'],
          avoidLabelOverlap: false,
          itemStyle: { borderRadius: 10, borderColor: '#f9f9f7', borderWidth: 2 },
          label: { show: false, position: 'center' },
          emphasis: { label: { show: true, fontSize: 40, fontWeight: 'bold' } },
          labelLine: { show: false },
          data: this.filterAndFormatData(data)
        }
      ],
      color: [
        '#a6cee3',
        '#1f78b4',
        '#b2df8a',
        '#33a02c',
        '#fb9a99',
        '#e31a1c',
        '#fdbf6f',
        '#ff7f00',
        '#cab2d6',
        '#6a3d9a'
      ]
    };
  }

  private async initMalwareTypeMalwareChart(): Promise<void> {
    const malwareData = await findMalwareTypeByMalwareType();
    const data = this.filterAndFormatMalwareTypeData(malwareData);

    const detectedDataSorted: CountByMalwareType[] = [];
    const malwareDetectedData = await findMalwareTypeMoreNumDetections();
    data.forEach((d) =>
      detectedDataSorted.push(malwareDetectedData.find((md) => md.malwareType === d.malwareType))
    );

    this.malwareTypeChartOpts = {
      tooltip: {
        trigger: 'axis',
        axisPointer: {
          type: 'shadow'
        }
      },
      legend: {},
      grid: {},
      xAxis: {
        type: 'value',
        nameLocation: 'middle',
        name: 'Num. de detecciones',
        nameTextStyle: {
          padding: 10,
          fontWeight: 'bold'
        }
      },
      yAxis: {
        type: 'category',
        data: data.map((d) => d.malwareType),
        nameLocation: 'middle',
        name: 'Familia de malware',
        nameTextStyle: {
          padding: 75,
          fontWeight: 'bold'
        }
      },
      series: [
        {
          type: 'bar',
          name: 'Número de variantes de la familia',
          data: data.map((d) => d.result)
        },
        {
          type: 'bar',
          name: 'Número infecciones detectadas',
          data: detectedDataSorted.map((d) => d.result)
        }
      ],
      color: ['rgb(217,95,14)', 'rgb(254,196,79)']
    };
  }

  private async initDeliveryMethodByFileChart(): Promise<void> {
    let data = await findDeliveryMethodByFileType();
    data = data.filter((d) => d.deliveryMethod != null && d.fileType != null);

    const series = this.filterData(data);
    const dimensions = ['malware', ...sortBy(Object.keys(groupBy(data, 'deliveryMethod')))];

    this.deliveryMethodChartOpts = {
      dataset: {
        dimensions,
        source: Object.keys(series).map((key) => {
          const serie = series[key];
          const result: Record<string, unknown> = { malware: key };

          for (const { deliveryMethod, count } of serie) {
            result[deliveryMethod] = count;
          }

          return result;
        })
      },
      tooltip: {
        trigger: 'axis',
        axisPointer: {
          type: 'shadow'
        }
      },
      legend: {},
      grid: {},
      xAxis: {
        type: 'category',
        data: Object.keys(series),
        axisLabel: {
          rotate: 330
        },
        name: 'Tipo de fichero',
        nameLocation: 'middle',
        nameTextStyle: {
          padding: 10,
          fontWeight: 'bold'
        }
      },
      yAxis: {
        type: 'value',
        nameLocation: 'middle',
        name: 'Num. de detecciones',
        nameTextStyle: {
          padding: 40,
          fontWeight: 'bold'
        }
      },
      series: [
        {
          type: 'bar'
        },
        {
          type: 'bar'
        },
        {
          type: 'bar'
        },
        {
          type: 'bar'
        },
        {
          type: 'bar'
        },
        {
          type: 'bar'
        }
      ],
      dataZoom: [
        {
          show: true,
          yAxisIndex: 0,
          filterMode: 'empty',
          showDataShadow: false,
          right: '40px'
        }
      ],
      color: ['#d73027', '#f46d43', '#fdae61', '#fee090', '#74add1', '#4575b4']
    };
  }

  private async initMalwareEvolutionMap(): Promise<void> {
    let mapData = await findMalwareEvolutionByCountry();
    mapData = mapData.filter((d) => !isNil(d.country));

    this.map = this.mapService.createNewMapInstanceAnimated(this.mapId, mapData, {
      zoomControl: false,
      doubleClickZoom: false,
      closePopupOnClick: false,
      trackResize: false,
      touchZoom: false,
      scrollWheelZoom: false
    });
  }

  private filterData(data: DeliveryMethodByFileType[]) {
    const fileTypes = groupBy(data, 'fileType');

    for (const key of Object.keys(fileTypes)) {
      fileTypes[key] = sortBy(fileTypes[key], ['count']).reverse();

      if (fileTypes[key].length < 6 || sumBy(fileTypes[key], 'count') < 580) {
        delete fileTypes[key];
      }
    }

    return fileTypes;
  }

  private filterAndFormatMalwareTypeData(data: CountByMalwareType[]) {
    data = data.filter((d) => d.malwareType != null);
    return sortBy(data, 'result').reverse().slice(0, 10);
  }

  private filterAndFormatData(data: FileFeatureByFileType[]) {
    data = data.filter((d) => d.fileType != null);
    const otherFilter = data.slice(9);
    data = data.slice(0, 9);
    data.push({ fileType: 'other', result: sumBy(otherFilter, 'result') });

    data = sortBy(data, 'result').reverse();

    return data.map((d) => ({ name: d.fileType, value: d.result }));
  }
}
