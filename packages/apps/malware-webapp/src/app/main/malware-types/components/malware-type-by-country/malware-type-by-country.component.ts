import { AfterViewInit, Component } from '@angular/core';
import * as L from 'leaflet';
import { MapService } from '@app/shared/services/map/map.service';
import { isNil } from '@core/utils/type-checkers';
import { findMalwareTypeByCountry } from '../../../../../../dependencies/use-cases/malware-types';
import { CountByCountry } from '@core/malware/malware-types/domain/models/malware-type';
import { sortBy, uniq } from 'lodash';

@Component({
  selector: 'tfm-malware-type-by-country',
  templateUrl: './malware-type-by-country.component.html',
  styleUrls: ['./malware-type-by-country.component.sass']
})
export class MalwareTypeByCountryComponent implements AfterViewInit {
  private map: L.Map;
  private originalCountryData: CountByCountry[] = [];

  mapId = 'map2';
  selectedOpt = '';

  countryData: CountByCountry[] = [];
  malwareTypes: string[] = [];

  constructor(private readonly mapService: MapService) {}

  async ngAfterViewInit(): Promise<void> {
    const data = await findMalwareTypeByCountry();
    this.countryData = data.filter(
      (d) => !isNil(d.country) && !isNil(d.malwareType) && d.malwareType !== ''
    );

    this.malwareTypes = sortBy(uniq(this.countryData.map((d) => d.malwareType)));
    this.originalCountryData = this.countryData;

    this.setSelectedMethod(this.malwareTypes[0]);
  }

  setSelectedMethod(malwareType: string) {
    this.selectedOpt = malwareType;
    this.countryData = this.originalCountryData.filter((d) => d.malwareType === malwareType);
    this.setMap();
  }

  private setMap(): void {
    if (this.map != null) {
      this.map.remove();
    }

    const data = this.countryData.map((d) => ({ country: d.country, count: d.result }));
    this.map = this.mapService.createNewMapInstance(this.mapId, data, {
      zoomControl: false,
      doubleClickZoom: false,
      closePopupOnClick: false,
      trackResize: false,
      touchZoom: false,
      scrollWheelZoom: false
    });
  }
}
