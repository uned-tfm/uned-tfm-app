import { Component, OnInit } from '@angular/core';
import { EChartsOption } from 'echarts';
import {
  findMalwareTypeByMalwareType,
  findMalwareTypeMoreNumDetections
} from '../../../../../../dependencies/use-cases/malware-types';
import { CountByMalwareType } from '@core/malware/malware-types/domain/models/malware-type';
import { sortBy } from 'lodash';

@Component({
  selector: 'tfm-malware-type-by-detections',
  templateUrl: './malware-type-by-detections.component.html',
  styleUrls: ['./malware-type-by-detections.component.sass']
})
export class MalwareTypeByDetectionsComponent implements OnInit {
  chartOpts: EChartsOption;

  async ngOnInit(): Promise<void> {
    await this.initMalwareTypeMalwareChart();
  }

  private async initMalwareTypeMalwareChart(): Promise<void> {
    const malwareData = await findMalwareTypeByMalwareType();
    const data = this.filterAndFormatData(malwareData);

    const detectedDataSorted: CountByMalwareType[] = [];
    const malwareDetectedData = await findMalwareTypeMoreNumDetections();
    data.forEach((d) =>
      detectedDataSorted.push(malwareDetectedData.find((md) => md.malwareType === d.malwareType))
    );

    this.chartOpts = {
      tooltip: {
        trigger: 'axis',
        axisPointer: {
          type: 'shadow'
        }
      },
      legend: {},
      grid: {},
      xAxis: {
        type: 'value',
        nameLocation: 'middle',
        name: 'Num. de detecciones',
        nameTextStyle: {
          padding: 10,
          fontWeight: 'bold'
        }
      },
      yAxis: {
        type: 'category',
        data: data.map((d) => d.malwareType),
        nameLocation: 'middle',
        name: 'Familia de malware',
        nameTextStyle: {
          padding: 75,
          fontWeight: 'bold'
        }
      },
      series: [
        {
          type: 'bar',
          name: 'Número de variantes de la familia',
          data: data.map((d) => d.result)
        },
        {
          type: 'bar',
          name: 'Número infecciones detectadas',
          data: detectedDataSorted.map((d) => d.result)
        }
      ],
      color: ['rgb(217,95,14)', 'rgb(254,196,79)']
    };
  }

  private filterAndFormatData(data: CountByMalwareType[]) {
    data = data.filter((d) => d.malwareType != null);
    return sortBy(data, 'result').reverse().slice(0, 10);
  }
}
